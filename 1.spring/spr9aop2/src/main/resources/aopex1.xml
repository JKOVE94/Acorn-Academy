<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- 핵심 로직 객체 / AOP Target -->
	<bean id="logicImpl" class="aopex1.LogicImpl">
		<constructor-arg>
			<ref bean="aticleDao" />
		</constructor-arg>
	</bean>

	<bean id="aticleDao" class="aopex1.AticleDao" />

	<!-- AOP설정 - AOPJoinpoint 사용 -->
	<!-- Advice 설정 -->

	<bean id="loggingAdvice" class="aopex1.LoggingAdvice" />
	<aop:config>
		<aop:aspect ref="loggingAdvice">
			<!-- aop:around advice를 가장 많이 사용한다. -->
			<!-- around는 앞 뒤의 내용을 수행한다. / before는 Target의 전의 메소드만 / after는 Target의 뒤의 메소드만 수행한다.--> 
														<!-- 0개 이상의 패키지. LogicInter라는 말이 포함된 클래스. 모든 매소드 (파라미터는 0개 이상) -->
														<!-- 인터페이스도 클래스의 일종 -->
			<aop:pointcut id="poi" expression="execution(* *..*LogicInter*.*(..)) or 
												execution(public void selectAll())"/>
												<!-- 메소드 하나만 지정한다면 메소드를 직접 입력해도 된다. --> 
			
			<!-- LogicInter에는 SelectAll이라는 메소드만 있기에 해당 메소드가 joinpoint가 된다. -->
			<aop:around method="mbc" pointcut-ref="poi"/> 
		</aop:aspect>
	</aop:config>
	
	<!-- execution(반환값패키지.클래스.메소드(인수)) 형식 -->
	
</beans>